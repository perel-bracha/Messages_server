{
  "version": 3,
  "sources": ["../src/index.ts", "../src/interfaces.ts", "../src/utils/dateUtils/dateUtils.ts", "../src/jewishDate.ts", "../src/jewishDateHebrew.ts"],
  "sourcesContent": ["export * from \"./interfaces\";\nexport * from \"./jewishDate\";\nexport * from \"./jewishDateHebrew\";\n", "/**\n * Copyright (c) Shmulik Kravitz.\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory for more information.\n *\n */\n\nexport const JewishMonth = {\n  None: \"None\",\n\n  Tishri: \"Tishri\",\n  Cheshvan: \"Cheshvan\",\n  Kislev: \"Kislev\",\n  Tevet: \"Tevet\",\n  Shevat: \"Shevat\",\n  Adar: \"Adar\",\n  Nisan: \"Nisan\",\n  Iyyar: \"Iyyar\",\n  Sivan: \"Sivan\",\n  Tammuz: \"Tammuz\",\n  Av: \"Av\",\n  Elul: \"Elul\",\n\n  AdarI: \"AdarI\",\n  AdarII: \"AdarII\",\n} as const;\n\nexport type JewishMonthType = keyof typeof JewishMonth;\n\nexport interface BasicJewishDate {\n  /**\n   *  day of month\n   */\n  day: number;\n\n  /**\n   * monthName\n   */\n  monthName: JewishMonthType;\n\n  /**\n   * month\n   */\n  year: number;\n}\n\nexport interface JewishDate extends BasicJewishDate {\n  /**\n   * month\n   */\n  month: number;\n}\n\nexport interface BasicJewishDateHebrew {\n  /**\n   *  day of month\n   */\n  day: string;\n\n  /**\n   * monthName\n   */\n  monthName: string;\n\n  /**\n   * month\n   */\n  year: string;\n}\n", "/**\n * Copyright (c) Shmulik Kravitz.\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory for more information.\n *\n */\n\nconst GREGORIAN_EPOCH = 1721425.5;\n\nconst HEBREW_EPOCH = 347995.5;\n\n/**\n * Computes the remainder of the division of `a` by `b`.\n * Unlike the built-in JavaScript `%` operator, this function handles negative numbers properly.\n * For example, `mod(-1, 5)` returns `4`, not `-1`.\n * @param {number} a - The number to compute the remainder of.\n * @param {number} b - The divisor.\n * @returns {number} - The remainder of `a` divided by `b`.\n */\nexport function mod(a: number, b: number) {\n  return a - b * Math.floor(a / b);\n}\n\n/**\n * Determines if a given year is a leap year in the Gregorian calendar.\n * @param year The year to check.\n * @returns True if the year is a leap year, false otherwise.\n */\nfunction leapGregorian(year: number) {\n  return year % 4 === 0 && !(year % 100 === 0 && year % 400 !== 0);\n}\n\n/**\n * Converts Gregorian date to Julian Day.\n * @param {number} year - The year in the Gregorian calendar.\n * @param {number} month - The month in the Gregorian calendar (January = 1).\n * @param {number} day - The day of the month in the Gregorian calendar.\n * @returns {number} The Julian Day corresponding to the Gregorian date.\n */\nexport function gregorianToJd(\n  year: number,\n  month: number,\n  day: number,\n): number {\n  return (\n    GREGORIAN_EPOCH -\n    1 +\n    365 * (year - 1) +\n    Math.floor((year - 1) / 4) +\n    -Math.floor((year - 1) / 100) +\n    Math.floor((year - 1) / 400) +\n    Math.floor(\n      (367 * month - 362) / 12 +\n        (month <= 2 ? 0 : leapGregorian(year) ? -1 : -2) +\n        day,\n    )\n  );\n}\n\n/**\n * Converts a Julian day number to Gregorian date.\n * @param {number} jd - The Julian day number to convert.\n * @returns {[number, number, number]} The Gregorian date as a tuple in the form of [year, month, day].\n */\nexport function jdToGregorian(jd: number): [number, number, number] {\n  const wjd: number = Math.floor(jd - 0.5) + 0.5;\n  const depoch: number = wjd - GREGORIAN_EPOCH;\n  const quadricent: number = Math.floor(depoch / 146097);\n  const dqc: number = mod(depoch, 146097);\n  const cent: number = Math.floor(dqc / 36524);\n  const dcent: number = mod(dqc, 36524);\n  const quad: number = Math.floor(dcent / 1461);\n  const dquad: number = mod(dcent, 1461);\n  const yindex: number = Math.floor(dquad / 365);\n  let year: number = quadricent * 400 + cent * 100 + quad * 4 + yindex;\n  if (!(cent === 4 || yindex === 4)) {\n    year++;\n  }\n  const yearday: number = wjd - gregorianToJd(year, 1, 1);\n  const leapadj: number =\n    wjd < gregorianToJd(year, 3, 1) ? 0 : leapGregorian(year) ? 1 : 2;\n  const month: number = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\n  const day: number = wjd - gregorianToJd(year, month, 1) + 1;\n\n  return [year, month, day];\n}\n\n/**\n * Determines if a Hebrew year is a leap year.\n * A leap year occurs 7 times in a 19 year cycle.\n * @param year - the Hebrew year to check\n * @returns true if the year is a leap year, false otherwise\n */\nfunction hebrewLeap(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n/**\n * Returns the number of months in a Hebrew year\n * @param {number} year - The Hebrew year\n * @returns {number} The number of months in the Hebrew year (12 or 13)\n */\nfunction hebrewYearMonths(year: number) {\n  return hebrewLeap(year) ? 13 : 12;\n}\n\n/**\n * Calculates the delay of the start of the Hebrew year, taking into account the \"dechiya\" (postponement) rules\n * specified in the Mishnah, which state that the start of the year can't be Sunday, Wednesday, or Friday.\n * @param {number} year - The Hebrew year for which to calculate the delay.\n * @returns {number} The day of the molad (the moment of the astronomical new moon) for the specified Hebrew year.\n */\nfunction calculateHebrewYearStartDelay(year: number) {\n  const months = Math.floor((235 * year - 234) / 19);\n  const parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day++;\n  }\n  return day;\n}\n\n/**\n * Calculates the delay of the start of the Hebrew year due to the length of adjacent years,\n * taking into account the \"dechiya\" (postponement) rules specified in the Mishnah.\n * The rules state that if the length of the year that is next in the 19-year cycle\n * (i.e., in the year after the current year) is exactly 356 days, then the start of the current year\n * is delayed by two days. Similarly, if the length of the year that immediately precedes the current year\n * is 382 days, then the start of the current year is delayed by one day. Otherwise, there is no delay.\n *\n * @param year - The Hebrew year for which to calculate the delay.\n * @returns The delay in days of the start of the Hebrew year.\n */\nfunction calculateHebrewYearAdjacentDelay(year: number) {\n  const last = calculateHebrewYearStartDelay(year - 1);\n  const present = calculateHebrewYearStartDelay(year);\n  const next = calculateHebrewYearStartDelay(year + 1);\n\n  return next - present === 356 ? 2 : present - last === 382 ? 1 : 0;\n}\n\n/**\n * Calculates the number of days in a Hebrew year.\n * @param {number} year - The Hebrew year to calculate.\n * @returns {number} - The number of days in the Hebrew year.\n */\nfunction hebrewYearDays(year: number) {\n  return hebrewToJd(year + 1, 7, 1) - hebrewToJd(year, 7, 1);\n}\n\n/**\n * Calculates the number of days in the specified month of the Hebrew year.\n * @param {number} year - The Hebrew year.\n * @param {number} month - The month of the year, where Nisan is 1 and Adar II (in leap years) is 13.\n * @returns {number} - The number of days in the specified month.\n */\nexport function hebrewMonthDays(year: number, month: number) {\n  if (\n    month === 2 ||\n    month === 4 ||\n    month === 6 ||\n    month === 10 ||\n    month === 13\n  ) {\n    return 29;\n  }\n\n  if (month === 12 && !hebrewLeap(year)) {\n    return 29;\n  }\n\n  if (month === 8 && !(mod(hebrewYearDays(year), 10) === 5)) {\n    return 29;\n  }\n\n  if (month === 9 && mod(hebrewYearDays(year), 10) === 3) {\n    return 29;\n  }\n\n  return 30;\n}\n\n/**\n * Converts a Hebrew date to the corresponding Julian day.\n * @param {number} year - The Hebrew year.\n * @param {number} month - The Hebrew month (1-13).\n * @param {number} day - The day of the month.\n * @returns {number} The Julian day corresponding to the Hebrew date.\n */\nexport function hebrewToJd(year: number, month: number, day: number) {\n  let mon: number;\n\n  const months = hebrewYearMonths(year);\n  let jd =\n    HEBREW_EPOCH +\n    calculateHebrewYearStartDelay(year) +\n    calculateHebrewYearAdjacentDelay(year) +\n    day +\n    1;\n\n  if (month < 7) {\n    for (mon = 7; mon <= months; mon++) {\n      jd += hebrewMonthDays(year, mon);\n    }\n    for (mon = 1; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon);\n    }\n  } else {\n    for (mon = 7; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon);\n    }\n  }\n\n  return jd;\n}\n\n/**\n * Converts a Julian date to a Hebrew date.\n * @param jd - The Julian date to convert.\n * @returns The Hebrew date as a tuple in the form of [year, month, day].\n */\nexport function jdToHebrew(julianDate: number): [number, number, number] {\n  const HEBREW_EPOCH = 347995.5;\n  let year: number;\n  let month: number;\n\n  const jd = Math.floor(julianDate) + 0.5;\n  const count: number = Math.floor(\n    ((jd - HEBREW_EPOCH) * 98496.0) / 35975351.0,\n  );\n  year = count - 1;\n  for (let i = count; jd >= hebrewToJd(i, 7, 1); i++) {\n    year++;\n  }\n  const first: number = jd < hebrewToJd(year, 1, 1) ? 7 : 1;\n  month = first;\n  for (let i = first; jd > hebrewToJd(year, i, hebrewMonthDays(year, i)); i++) {\n    month++;\n  }\n  const day = jd - hebrewToJd(year, month, 1) + 1;\n  return [year, month, day];\n}\n", "/**\n * Copyright (c) Shmulik Kravitz.\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory for more information.\n *\n */\n\nimport type {\n  BasicJewishDate,\n  JewishDate,\n  JewishMonthType,\n} from \"./interfaces\";\nimport { JewishMonth } from \"./interfaces\";\nimport {\n  gregorianToJd,\n  hebrewMonthDays,\n  hebrewToJd,\n  jdToGregorian,\n  jdToHebrew,\n} from \"./utils/dateUtils/dateUtils\";\nimport { toLength } from \"./utils/numberUtils/numberUtils\";\n\n/**\n * Checks if the given year is a leap year according to the Jewish calendar.\n * @param {number} year - The year to check.\n * @returns {boolean} True if the given year is a leap year according to the Jewish calendar, false otherwise.\n */\nexport const isLeapYear = (year: number): boolean => {\n  const yearIndex = year % 19;\n  return (\n    yearIndex === 0 ||\n    yearIndex === 3 ||\n    yearIndex === 6 ||\n    yearIndex === 8 ||\n    yearIndex === 11 ||\n    yearIndex === 14 ||\n    yearIndex === 17\n  );\n};\n\n/**\n * Returns the index of the given Jewish month in the Jewish calendar.\n * @param {JewishMonthType} jewishMonth - The Jewish month to get the index for.\n * @returns {number} The index of the given Jewish month in the Jewish calendar.\n */\nexport const getIndexByJewishMonth = (jewishMonth: JewishMonthType): number => {\n  const jewishMonthsNamesDic = {\n    [JewishMonth.None]: 0,\n\n    [JewishMonth.Tishri]: 7,\n    [JewishMonth.Cheshvan]: 8,\n    [JewishMonth.Kislev]: 9,\n    [JewishMonth.Tevet]: 10,\n    [JewishMonth.Shevat]: 11,\n    [JewishMonth.Adar]: 12,\n    [JewishMonth.AdarI]: 12,\n    [JewishMonth.AdarII]: 13,\n    [JewishMonth.Nisan]: 1,\n    [JewishMonth.Iyyar]: 2,\n    [JewishMonth.Sivan]: 3,\n    [JewishMonth.Tammuz]: 4,\n    [JewishMonth.Av]: 5,\n    [JewishMonth.Elul]: 6,\n  };\n  return jewishMonthsNamesDic[jewishMonth] || 0;\n};\n\n/**\n *  Returns the Jewish month corresponding to the given index in the Jewish calendar of the given year.\n * @param {number} index - The index of the Jewish month to get (1-based).\n * @param {number} jewishYear - The year to get the Jewish month in.\n * @returns {JewishMonthType} The Jewish month corresponding to the given index in the Jewish calendar of the given year.\n */\nexport const getJewishMonthByIndex = (\n  index: number,\n  jewishYear: number,\n): JewishMonthType => {\n  const jewishMonths: JewishMonthType[] = [\n    JewishMonth.None,\n    JewishMonth.Nisan,\n    JewishMonth.Iyyar,\n    JewishMonth.Sivan,\n    JewishMonth.Tammuz,\n    JewishMonth.Av,\n    JewishMonth.Elul,\n    JewishMonth.Tishri,\n    JewishMonth.Cheshvan,\n    JewishMonth.Kislev,\n    JewishMonth.Tevet,\n    JewishMonth.Shevat,\n    JewishMonth.Adar,\n    JewishMonth.AdarII,\n  ];\n\n  const month = jewishMonths[index] || JewishMonth.None;\n  if (month === JewishMonth.Adar && isLeapYear(jewishYear)) {\n    return JewishMonth.AdarI;\n  }\n  return month;\n};\n\n/**\n *  Returns an array of the Jewish month names in the correct order for the given year.\n *  @param {number} year - The Jewish year to get the months for.\n *  @returns {string[]} An array of the Jewish month names in the correct order for the given year.\n *  */\nexport const getJewishMonthsInOrder = (year: number): string[] => {\n  const jewishMonthsInOrder: JewishMonthType[] = [\n    JewishMonth.None,\n    JewishMonth.Tishri,\n    JewishMonth.Cheshvan,\n    JewishMonth.Kislev,\n    JewishMonth.Tevet,\n    JewishMonth.Shevat,\n    JewishMonth.AdarI,\n    JewishMonth.AdarII,\n    JewishMonth.Nisan,\n    JewishMonth.Iyyar,\n    JewishMonth.Sivan,\n    JewishMonth.Tammuz,\n    JewishMonth.Av,\n    JewishMonth.Elul,\n  ];\n  if (isLeapYear(year)) {\n    return jewishMonthsInOrder;\n  }\n\n  return jewishMonthsInOrder\n    .filter((month) => month !== \"AdarII\")\n    .map((month) => {\n      if (month === \"AdarI\") {\n        return \"Adar\";\n      }\n\n      return month;\n    });\n};\n\n/**\n * Returns a string representation of the given Jewish date in the format '\u05DB\"\u05D0 \u05E0\u05D9\u05E1\u05DF \u05EA\u05E9\u05E4\"\u05D2'.\n * @param {JewishDate} jewishDate - The Jewish date to format.\n * @returns {string} A string representation of the given Jewish date in the format '\u05DB\"\u05D0 \u05E0\u05D9\u05E1\u05DF \u05EA\u05E9\u05E4\"\u05D2'.\n */\nexport const formatJewishDate = (jewishDate: JewishDate): string => {\n  return `${jewishDate.day} ${jewishDate.monthName} ${jewishDate.year}`;\n};\n\n/**\n * Converts the given Gregorian date to a Jewish date.\n * @param {Date} date - The Gregorian date to convert.\n * @returns {JewishDate} The Jewish date corresponding to the given Gregorian date.\n */\nexport const toJewishDate = (date: Date): JewishDate => {\n  const year = date.getFullYear();\n\n  /*\n  Note: The month in JavaScript's Date object is 0-indexed (January is 0, December is 11).\n  To convert to a correct date representation, we will add 1 to the month value.\n  */\n  const month = date.getMonth() + 1;\n\n  const day = date.getDate();\n  //   console.log({ year, month, day });\n\n  const jd2 = gregorianToJd(year, month, day);\n\n  const jewishDateArr = jdToHebrew(jd2);\n  // console.log(jewishDateArr);\n\n  const jewishYear = jewishDateArr[0];\n  const jewishMonthName = getJewishMonthByIndex(jewishDateArr[1], jewishYear);\n  // console.log({ jewishMonthName });\n  const jewishMonth = getJewishMonthsInOrder(jewishYear).findIndex(\n    (i) => i === jewishMonthName,\n  );\n  const JewishDate: JewishDate = {\n    year: jewishYear,\n    monthName: jewishMonthName,\n    month: jewishMonth,\n    day: jewishDateArr[2],\n  };\n  return JewishDate;\n};\n\n/**\n * Converts the given Jewish date to a Gregorian date.\n * @param {BasicJewishDate} jewishDate - The Jewish date to convert.\n * @returns {Date} The Gregorian date corresponding to the given Jewish date.\n * */\nexport const toGregorianDate = (jewishDate: BasicJewishDate): Date => {\n  const jewishMonth = getIndexByJewishMonth(jewishDate.monthName);\n  // console.log({ jewishMonth });\n  const jd = hebrewToJd(jewishDate.year, jewishMonth, jewishDate.day);\n  // console.log(jd);\n\n  const gregDateArr = jdToGregorian(jd);\n  // console.log(gregDateArr);\n\n  const date = new Date();\n  // Convert month to month index.\n  date.setFullYear(gregDateArr[0], gregDateArr[1] - 1, gregDateArr[2]);\n  if (date.getHours() > 0) {\n    // fix issue in chrome that we chan't set hours in Date Constructor for year 0000\n    date.setHours(0, 0, 0, 0);\n  }\n  return date;\n};\n\n/**\n * Calculates the number of days in a Jewish month for a given Jewish year.\n * @param {number} jewishYear - The Jewish year for which the calculation is performed.\n * @param {JewishMonthType} jewishMonth - The type of Jewish month (e.g., 'Heshvan', 'Kislev').\n * @returns {number} - The number of days in the specified Jewish month of the given year.\n */\nexport const calcDaysInMonth = (\n  jewishYear: number,\n  jewishMonth: JewishMonthType,\n): number => {\n  const jewishMonthIndex = getIndexByJewishMonth(jewishMonth);\n  return hebrewMonthDays(jewishYear, jewishMonthIndex);\n};\n", "/**\n * Copyright (c) Shmulik Kravitz.\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory for more information.\n *\n */\n\nimport gematriya from \"gematriya\";\nimport type {\n  BasicJewishDate,\n  BasicJewishDateHebrew,\n  JewishMonthType,\n} from \"./interfaces\";\nimport { JewishMonth } from \"./interfaces\";\n\n/**\n * Returns the name of a Jewish month in Hebrew, given its type.\n * @param {JewishMonthType} jewishMonth - The Jewish month type.\n * @returns {string} - The name of the Jewish month in Hebrew.\n */\nexport const getJewishMonthInHebrew = (\n  jewishMonth: JewishMonthType,\n): string => {\n  const jewishMonthsHebrewNamesDic = {\n    [JewishMonth.None]: \"\u05DC\u05DC\u05D0\",\n\n    [JewishMonth.Tishri]: \"\u05EA\u05E9\u05E8\u05D9\",\n    [JewishMonth.Cheshvan]: \"\u05D7\u05E9\u05D5\u05DF\",\n    [JewishMonth.Kislev]: \"\u05DB\u05E1\u05DC\u05D5\",\n    [JewishMonth.Tevet]: \"\u05D8\u05D1\u05EA\",\n    [JewishMonth.Shevat]: \"\u05E9\u05D1\u05D8\",\n    [JewishMonth.Adar]: \"\u05D0\u05D3\u05E8\",\n    [JewishMonth.AdarI]: \"\u05D0\u05D3\u05E8 \u05D0\",\n    [JewishMonth.AdarII]: \"\u05D0\u05D3\u05E8 \u05D1\",\n    [JewishMonth.Nisan]: \"\u05E0\u05D9\u05E1\u05DF\",\n    [JewishMonth.Iyyar]: \"\u05D0\u05D9\u05D9\u05E8\",\n    [JewishMonth.Sivan]: \"\u05E1\u05D9\u05D5\u05DF\",\n    [JewishMonth.Tammuz]: \"\u05EA\u05DE\u05D5\u05D6\",\n    [JewishMonth.Av]: \"\u05D0\u05D1\",\n    [JewishMonth.Elul]: \"\u05D0\u05DC\u05D5\u05DC\",\n  };\n  return jewishMonthsHebrewNamesDic[jewishMonth];\n};\n\n/**\n * Converts a number to its Hebrew equivalent in gematria\n * @param num - The number to convert to Hebrew\n * @param addGeresh - Whether or not to add a geresh symbol (') to the end of the number\n * @param addPunctuate - Whether or not to add a punctuation mark (.) after the thousands digit\n * @returns The Hebrew equivalent of the given number\n */\nexport const convertNumberToHebrew = (\n  num: number,\n  addGeresh = true,\n  addPunctuate = true,\n): string => {\n  return gematriya(num, { geresh: addGeresh, punctuate: addPunctuate });\n};\n\n/**\n * Converts a basic Jewish date object to a Hebrew date object with Hebrew letters.\n * @param {BasicJewishDate} jewishDate - The basic Jewish date object to convert.\n * @returns {BasicJewishDateHebrew} The Hebrew date object with Hebrew letters.\n */\nexport const toHebrewJewishDate = (\n  jewishDate: BasicJewishDate,\n): BasicJewishDateHebrew => {\n  return {\n    day: convertNumberToHebrew(jewishDate.day),\n    monthName: getJewishMonthInHebrew(jewishDate.monthName),\n    year: convertNumberToHebrew(jewishDate.year),\n  };\n};\n\n/**\n * Formats a Jewish date object into a string representation in Hebrew.\n * @param {BasicJewishDate} jewishDate - The Jewish date object to format.\n * @returns {string} The Hebrew string representation of the Jewish date.\n */\nexport const formatJewishDateInHebrew = (\n  jewishDate: BasicJewishDate,\n): string => {\n  const jewishDateInHebrew = toHebrewJewishDate(jewishDate);\n  return `${jewishDateInHebrew.day} ${jewishDateInHebrew.monthName} ${jewishDateInHebrew.year}`;\n};\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "JewishMonth", "calcDaysInMonth", "convertNumberToHebrew", "formatJewishDate", "formatJewishDateInHebrew", "getIndexByJewishMonth", "getJewishMonthByIndex", "getJewishMonthInHebrew", "getJewishMonthsInOrder", "isLeapYear", "toGregorianDate", "toHebrewJewishDate", "toJewishDate", "__toCommonJS", "JewishMonth", "GREGORIAN_EPOCH", "HEBREW_EPOCH", "mod", "a", "b", "leapGregorian", "year", "gregorianToJd", "month", "day", "jdToGregorian", "jd", "wjd", "depoch", "quadricent", "dqc", "cent", "dcent", "quad", "dquad", "yindex", "yearday", "leapadj", "hebrewLeap", "hebrewYearMonths", "calculateHebrewYearStartDelay", "months", "parts", "calculateHebrewYearAdjacentDelay", "last", "present", "hebrewYearDays", "hebrewToJd", "hebrewMonthDays", "mon", "jdToHebrew", "julianDate", "count", "first", "isLeapYear", "year", "yearIndex", "getIndexByJewishMonth", "jewishMonth", "JewishMonth", "getJewishMonthByIndex", "index", "jewishYear", "month", "getJewishMonthsInOrder", "jewishMonthsInOrder", "formatJewishDate", "jewishDate", "toJewishDate", "date", "day", "jd2", "gregorianToJd", "jewishDateArr", "jdToHebrew", "jewishMonthName", "i", "toGregorianDate", "jd", "hebrewToJd", "gregDateArr", "jdToGregorian", "calcDaysInMonth", "jewishMonthIndex", "hebrewMonthDays", "import_gematriya", "getJewishMonthInHebrew", "jewishMonth", "JewishMonth", "convertNumberToHebrew", "num", "addGeresh", "addPunctuate", "gematriya", "toHebrewJewishDate", "jewishDate", "formatJewishDateInHebrew", "jewishDateInHebrew"]
}
