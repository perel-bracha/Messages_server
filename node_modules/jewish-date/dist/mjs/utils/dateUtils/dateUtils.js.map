{
  "version": 3,
  "sources": ["../../../../src/utils/dateUtils/dateUtils.ts"],
  "sourcesContent": ["/**\n * Copyright (c) Shmulik Kravitz.\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory for more information.\n *\n */\n\nconst GREGORIAN_EPOCH = 1721425.5;\n\nconst HEBREW_EPOCH = 347995.5;\n\n/**\n * Computes the remainder of the division of `a` by `b`.\n * Unlike the built-in JavaScript `%` operator, this function handles negative numbers properly.\n * For example, `mod(-1, 5)` returns `4`, not `-1`.\n * @param {number} a - The number to compute the remainder of.\n * @param {number} b - The divisor.\n * @returns {number} - The remainder of `a` divided by `b`.\n */\nexport function mod(a: number, b: number) {\n  return a - b * Math.floor(a / b);\n}\n\n/**\n * Determines if a given year is a leap year in the Gregorian calendar.\n * @param year The year to check.\n * @returns True if the year is a leap year, false otherwise.\n */\nfunction leapGregorian(year: number) {\n  return year % 4 === 0 && !(year % 100 === 0 && year % 400 !== 0);\n}\n\n/**\n * Converts Gregorian date to Julian Day.\n * @param {number} year - The year in the Gregorian calendar.\n * @param {number} month - The month in the Gregorian calendar (January = 1).\n * @param {number} day - The day of the month in the Gregorian calendar.\n * @returns {number} The Julian Day corresponding to the Gregorian date.\n */\nexport function gregorianToJd(\n  year: number,\n  month: number,\n  day: number,\n): number {\n  return (\n    GREGORIAN_EPOCH -\n    1 +\n    365 * (year - 1) +\n    Math.floor((year - 1) / 4) +\n    -Math.floor((year - 1) / 100) +\n    Math.floor((year - 1) / 400) +\n    Math.floor(\n      (367 * month - 362) / 12 +\n        (month <= 2 ? 0 : leapGregorian(year) ? -1 : -2) +\n        day,\n    )\n  );\n}\n\n/**\n * Converts a Julian day number to Gregorian date.\n * @param {number} jd - The Julian day number to convert.\n * @returns {[number, number, number]} The Gregorian date as a tuple in the form of [year, month, day].\n */\nexport function jdToGregorian(jd: number): [number, number, number] {\n  const wjd: number = Math.floor(jd - 0.5) + 0.5;\n  const depoch: number = wjd - GREGORIAN_EPOCH;\n  const quadricent: number = Math.floor(depoch / 146097);\n  const dqc: number = mod(depoch, 146097);\n  const cent: number = Math.floor(dqc / 36524);\n  const dcent: number = mod(dqc, 36524);\n  const quad: number = Math.floor(dcent / 1461);\n  const dquad: number = mod(dcent, 1461);\n  const yindex: number = Math.floor(dquad / 365);\n  let year: number = quadricent * 400 + cent * 100 + quad * 4 + yindex;\n  if (!(cent === 4 || yindex === 4)) {\n    year++;\n  }\n  const yearday: number = wjd - gregorianToJd(year, 1, 1);\n  const leapadj: number =\n    wjd < gregorianToJd(year, 3, 1) ? 0 : leapGregorian(year) ? 1 : 2;\n  const month: number = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\n  const day: number = wjd - gregorianToJd(year, month, 1) + 1;\n\n  return [year, month, day];\n}\n\n/**\n * Determines if a Hebrew year is a leap year.\n * A leap year occurs 7 times in a 19 year cycle.\n * @param year - the Hebrew year to check\n * @returns true if the year is a leap year, false otherwise\n */\nfunction hebrewLeap(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n/**\n * Returns the number of months in a Hebrew year\n * @param {number} year - The Hebrew year\n * @returns {number} The number of months in the Hebrew year (12 or 13)\n */\nfunction hebrewYearMonths(year: number) {\n  return hebrewLeap(year) ? 13 : 12;\n}\n\n/**\n * Calculates the delay of the start of the Hebrew year, taking into account the \"dechiya\" (postponement) rules\n * specified in the Mishnah, which state that the start of the year can't be Sunday, Wednesday, or Friday.\n * @param {number} year - The Hebrew year for which to calculate the delay.\n * @returns {number} The day of the molad (the moment of the astronomical new moon) for the specified Hebrew year.\n */\nfunction calculateHebrewYearStartDelay(year: number) {\n  const months = Math.floor((235 * year - 234) / 19);\n  const parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day++;\n  }\n  return day;\n}\n\n/**\n * Calculates the delay of the start of the Hebrew year due to the length of adjacent years,\n * taking into account the \"dechiya\" (postponement) rules specified in the Mishnah.\n * The rules state that if the length of the year that is next in the 19-year cycle\n * (i.e., in the year after the current year) is exactly 356 days, then the start of the current year\n * is delayed by two days. Similarly, if the length of the year that immediately precedes the current year\n * is 382 days, then the start of the current year is delayed by one day. Otherwise, there is no delay.\n *\n * @param year - The Hebrew year for which to calculate the delay.\n * @returns The delay in days of the start of the Hebrew year.\n */\nfunction calculateHebrewYearAdjacentDelay(year: number) {\n  const last = calculateHebrewYearStartDelay(year - 1);\n  const present = calculateHebrewYearStartDelay(year);\n  const next = calculateHebrewYearStartDelay(year + 1);\n\n  return next - present === 356 ? 2 : present - last === 382 ? 1 : 0;\n}\n\n/**\n * Calculates the number of days in a Hebrew year.\n * @param {number} year - The Hebrew year to calculate.\n * @returns {number} - The number of days in the Hebrew year.\n */\nfunction hebrewYearDays(year: number) {\n  return hebrewToJd(year + 1, 7, 1) - hebrewToJd(year, 7, 1);\n}\n\n/**\n * Calculates the number of days in the specified month of the Hebrew year.\n * @param {number} year - The Hebrew year.\n * @param {number} month - The month of the year, where Nisan is 1 and Adar II (in leap years) is 13.\n * @returns {number} - The number of days in the specified month.\n */\nexport function hebrewMonthDays(year: number, month: number) {\n  if (\n    month === 2 ||\n    month === 4 ||\n    month === 6 ||\n    month === 10 ||\n    month === 13\n  ) {\n    return 29;\n  }\n\n  if (month === 12 && !hebrewLeap(year)) {\n    return 29;\n  }\n\n  if (month === 8 && !(mod(hebrewYearDays(year), 10) === 5)) {\n    return 29;\n  }\n\n  if (month === 9 && mod(hebrewYearDays(year), 10) === 3) {\n    return 29;\n  }\n\n  return 30;\n}\n\n/**\n * Converts a Hebrew date to the corresponding Julian day.\n * @param {number} year - The Hebrew year.\n * @param {number} month - The Hebrew month (1-13).\n * @param {number} day - The day of the month.\n * @returns {number} The Julian day corresponding to the Hebrew date.\n */\nexport function hebrewToJd(year: number, month: number, day: number) {\n  let mon: number;\n\n  const months = hebrewYearMonths(year);\n  let jd =\n    HEBREW_EPOCH +\n    calculateHebrewYearStartDelay(year) +\n    calculateHebrewYearAdjacentDelay(year) +\n    day +\n    1;\n\n  if (month < 7) {\n    for (mon = 7; mon <= months; mon++) {\n      jd += hebrewMonthDays(year, mon);\n    }\n    for (mon = 1; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon);\n    }\n  } else {\n    for (mon = 7; mon < month; mon++) {\n      jd += hebrewMonthDays(year, mon);\n    }\n  }\n\n  return jd;\n}\n\n/**\n * Converts a Julian date to a Hebrew date.\n * @param jd - The Julian date to convert.\n * @returns The Hebrew date as a tuple in the form of [year, month, day].\n */\nexport function jdToHebrew(julianDate: number): [number, number, number] {\n  const HEBREW_EPOCH = 347995.5;\n  let year: number;\n  let month: number;\n\n  const jd = Math.floor(julianDate) + 0.5;\n  const count: number = Math.floor(\n    ((jd - HEBREW_EPOCH) * 98496.0) / 35975351.0,\n  );\n  year = count - 1;\n  for (let i = count; jd >= hebrewToJd(i, 7, 1); i++) {\n    year++;\n  }\n  const first: number = jd < hebrewToJd(year, 1, 1) ? 7 : 1;\n  month = first;\n  for (let i = first; jd > hebrewToJd(year, i, hebrewMonthDays(year, i)); i++) {\n    month++;\n  }\n  const day = jd - hebrewToJd(year, month, 1) + 1;\n  return [year, month, day];\n}\n"],
  "mappings": "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",
  "names": ["GREGORIAN_EPOCH", "HEBREW_EPOCH", "mod", "a", "b", "leapGregorian", "year", "gregorianToJd", "month", "day", "jdToGregorian", "jd", "wjd", "depoch", "quadricent", "dqc", "cent", "dcent", "quad", "dquad", "yindex", "yearday", "leapadj", "hebrewLeap", "hebrewYearMonths", "calculateHebrewYearStartDelay", "months", "parts", "calculateHebrewYearAdjacentDelay", "last", "present", "hebrewYearDays", "hebrewToJd", "hebrewMonthDays", "mon", "jdToHebrew", "julianDate", "count", "i", "first"]
}
